# OpenMetadata Standalone Service
# ================================
# Metadata catalog and data discovery platform
#
# Dependencies:
#   - platform-infrastructure (provides platform-postgres via platform_network)
#
# Architecture: 2 OpenMetadata-specific services
#   - Elasticsearch: Search and indexing (OpenMetadata-specific)
#   - OpenMetadata Server: Web UI + REST API + Backend (all-in-one application)
#
# Usage:
#   Requires: platform-infrastructure must be running first
#   make start     # Start OpenMetadata
#   make stop      # Stop OpenMetadata
#   make status    # Check service health

services:
  # ============================================
  # Elasticsearch (Search & Indexing)
  # ============================================
  # Provides full-text search for metadata catalog
  # ============================================
  openmetadata-elasticsearch:
    image: ${IMAGE_ELASTICSEARCH:-docker.elastic.co/elasticsearch/elasticsearch:8.10.2}
    container_name: openmetadata-elasticsearch
    restart: unless-stopped

    environment:
      # Single-node mode (suitable for local development)
      - discovery.type=single-node
      # Security disabled for local development
      - xpack.security.enabled=false
      # Memory allocation
      - ES_JAVA_OPTS=-Xms1g -Xmx1g

    volumes:
      # Persistent storage for search indices
      - openmetadata_es_data:/usr/share/elasticsearch/data

    networks:
      - platform-net  # Connect to shared platform network

    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:9200/_cluster/health | grep -q '\"status\":\"\\(green\\|yellow\\)\"' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================
  # OpenMetadata Server (UI + API + Connectors)
  # ============================================
  # Core metadata catalog application
  # - Web UI for browsing metadata
  # - REST API for programmatic access
  # - Built-in connectors (can run ad-hoc ingestion)
  # ============================================
  openmetadata-server:
    image: ${IMAGE_OPENMETADATA_SERVER:-docker.getcollate.io/openmetadata/server:1.2.0}
    container_name: openmetadata-server
    restart: unless-stopped

    # Load ONLY passwords from platform-bootstrap (secrets management)
    env_file:
      - ../platform-bootstrap/.env

    ports:
      - "${OPENMETADATA_PORT:-8585}:8585"

    environment:
      # ========================================
      # Database Configuration (Shared PostgreSQL)
      # ========================================
      # OpenMetadata builds JDBC URL from these components:
      DB_DRIVER_CLASS: org.postgresql.Driver
      DB_SCHEME: postgresql
      DB_HOST: platform-postgres
      DB_PORT: 5432
      OM_DATABASE: openmetadata_db
      # Credentials from env_file (platform-bootstrap/.env - single source of truth)
      DB_USER: ${OPENMETADATA_DB_USER:-openmetadata_user}
      DB_USER_PASSWORD: ${OPENMETADATA_DB_PASSWORD:-changeme}

      # ========================================
      # Elasticsearch Configuration
      # ========================================
      ELASTICSEARCH_HOST: openmetadata-elasticsearch
      ELASTICSEARCH_PORT: 9200

      # ========================================
      # OpenMetadata Configuration
      # ========================================
      OPENMETADATA_CLUSTER_NAME: ${OPENMETADATA_CLUSTER_NAME:-local-dev}
      SERVER_HOST_API_URL: http://localhost:8585/api

      # ========================================
      # Authentication (Basic for Local Dev)
      # ========================================
      AUTHENTICATION_PROVIDER: basic
      AUTHENTICATION_PUBLIC_KEYS: "[]"
      AUTHORIZER_CLASS_NAME: org.openmetadata.service.security.DefaultAuthorizer
      AUTHORIZER_REQUEST_FILTER: org.openmetadata.service.security.JwtFilter
      AUTHORIZER_ADMIN_PRINCIPALS: "[admin]"
      AUTHORIZER_PRINCIPAL_DOMAIN: "open-metadata.org"

      # ========================================
      # Pipeline Service Client (For Airflow Integration)
      # ========================================
      PIPELINE_SERVICE_CLIENT_ENABLED: true
      PIPELINE_SERVICE_CLIENT_CLASS_NAME: org.openmetadata.service.clients.pipeline.airflow.AirflowRESTClient

    depends_on:
      openmetadata-elasticsearch:
        condition: service_healthy
      # Note: platform-postgres from platform-infrastructure must be running
      # No explicit depends_on since it's in a different compose file

    networks:
      - platform-net  # Connect to shared platform network (where platform-postgres lives)

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8585/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10

# ============================================
# Volumes
# ============================================

volumes:
  # Elasticsearch indices (OpenMetadata-specific data)
  # May already exist from previous setup - use external to avoid warning
  openmetadata_es_data:
    name: openmetadata_es_data
    external: true

  # Note: platform_postgres_data volume is managed by platform-infrastructure service

# ============================================
# Networks
# ============================================

networks:
  # Shared platform network (managed by platform-infrastructure)
  # All platform services connect to this network
  platform-net:
    name: platform_network
    external: true
