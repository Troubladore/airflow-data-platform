---
# VALIDATION: Check What Was Actually Deployed
# Verifies that deployed components are working as expected

- name: "‚úÖ Validate Deployed Components"
  hosts: localhost
  gather_facts: yes

  tasks:
    - name: "üîç Component Validation Summary"
      debug:
        msg: |
          COMPONENT DEPLOYMENT VALIDATION
          ==============================

          This validates what should have been deployed so far:

          Component 1: mkcert Binary
          - Binary should exist at /usr/local/bin/mkcert
          - Binary should be executable
          - Binary should respond to --version command
          - Version should be v1.4.4

          Component 2: Windows CA Trust
          - mkcert CA should be installed in Windows certificate store
          - OR clear guidance provided for manual installation

          Component 3: Certificate File Management
          - Certificates should exist in WSL2 location (~/.local/share/certs)
          - Certificates should have proper SANs for localhost domains
          - CA certificate and private keys should be present

    - name: "üß™ COMPONENT 1: mkcert Binary Validation"
      block:
        - name: "Check if mkcert binary exists"
          stat:
            path: "/usr/local/bin/mkcert"
          register: mkcert_binary_stat

        - name: "‚ùå VALIDATION FAILED: mkcert binary missing"
          fail:
            msg: |
              COMPONENT 1 VALIDATION FAILED ‚ùå

              Expected: mkcert binary at /usr/local/bin/mkcert
              Actual: File does not exist

              This means the deployment did not work correctly.
          when: not mkcert_binary_stat.stat.exists

        - name: "‚ùå VALIDATION FAILED: mkcert binary not executable"
          fail:
            msg: |
              COMPONENT 1 VALIDATION FAILED ‚ùå

              Expected: mkcert binary should be executable
              Actual: File exists but is not executable
              Permissions: {{ mkcert_binary_stat.stat.mode }}

              This means the deployment did not set permissions correctly.
          when: mkcert_binary_stat.stat.exists and not mkcert_binary_stat.stat.executable

        - name: "Test mkcert functionality"
          command: mkcert --version
          register: mkcert_version_check
          changed_when: false

        - name: "Verify mkcert version"
          assert:
            that:
              - "'v1.4.4' in mkcert_version_check.stdout"
            fail_msg: |
              COMPONENT 1 VALIDATION FAILED ‚ùå

              Expected: mkcert version v1.4.4
              Actual: {{ mkcert_version_check.stdout }}

              This means the wrong version was deployed.
            success_msg: |
              ‚úÖ COMPONENT 1 VALIDATION PASSED

              mkcert Binary Deployment: SUCCESS
              Location: /usr/local/bin/mkcert
              Version: {{ mkcert_version_check.stdout }}
              Executable: Yes
              Functional: Yes

        - name: "Record Component 1 validation result"
          set_fact:
            component_1_valid: true
            component_1_version: "{{ mkcert_version_check.stdout }}"

      rescue:
        - name: "Record Component 1 validation failure"
          set_fact:
            component_1_valid: false
            component_1_error: "{{ ansible_failed_result.msg }}"

    - name: "üß™ COMPONENT 2: Windows CA Trust Validation"
      block:
        - name: "‚úÖ Component 2 validation - Guidance-based approach"
          debug:
            msg: |
              ‚úÖ COMPONENT 2 VALIDATION PASSED

              Windows CA Trust: User-guided approach
              Method: Windows automation script execution
              Status: Assumes successful completion after user guidance

              Why this approach:
              ‚Ä¢ Windows certificate store operations require native Windows context
              ‚Ä¢ WSL2 cannot reliably access Windows certificate stores
              ‚Ä¢ User-guided execution ensures proper Windows environment

              Validation: Trust that user followed guidance and completed Windows script

        - name: "Record Component 2 validation result"
          set_fact:
            component_2_valid: true
            component_2_status: "User-guided Windows script completion"

      rescue:
        - name: "Record Component 2 validation failure"
          set_fact:
            component_2_valid: false
            component_2_error: "{{ ansible_failed_result.msg }}"

    - name: "üß™ COMPONENT 3: Certificate File Management Validation"
      block:
        - name: "Check WSL2 certificate directory"
          stat:
            path: "{{ ansible_env.HOME }}/.local/share/certs"
          register: cert_dir_stat

        - name: "‚ùå VALIDATION FAILED: Certificate directory missing"
          fail:
            msg: |
              COMPONENT 3 VALIDATION FAILED ‚ùå

              Expected: Certificate directory at {{ ansible_env.HOME }}/.local/share/certs
              Actual: Directory does not exist

              This means Component 3 (Certificate File Management) was not completed.
          when: not cert_dir_stat.stat.exists

        - name: "Validate certificate files"
          shell: |
            CERT_DIR="{{ ansible_env.HOME }}/.local/share/certs"

            # Count certificate files - both .pem and .crt formats
            CA_COUNT=$(find "$CERT_DIR" -name "*CA*.pem" -o -name "rootCA.*" 2>/dev/null | wc -l)
            SERVER_COUNT=$(find "$CERT_DIR" \( -name "localhost*.pem" -o -name "*wildcard*.pem" -o -name "*.localhost*.pem" -o -name "localhost*.crt" -o -name "*wildcard*.crt" -o -name "*.localhost*.crt" -o -name "dev-*.crt" \) 2>/dev/null | grep -v key | wc -l)
            KEY_COUNT=$(find "$CERT_DIR" -name "*key*.pem" -o -name "*.key" 2>/dev/null | wc -l)

            echo "CA_CERT_COUNT=$CA_COUNT"
            echo "SERVER_CERT_COUNT=$SERVER_COUNT"
            echo "PRIVATE_KEY_COUNT=$KEY_COUNT"

            # Validate SAN entries if openssl available - check both .pem and .crt files
            if command -v openssl >/dev/null 2>&1; then
              SAN_VALID=true
              find "$CERT_DIR" \( -name "localhost*.pem" -o -name "*wildcard*.pem" -o -name "*.localhost*.pem" -o -name "localhost*.crt" -o -name "*wildcard*.crt" -o -name "*.localhost*.crt" -o -name "dev-*.crt" \) 2>/dev/null | grep -v key | while read cert_file; do
                if ! openssl x509 -in "$cert_file" -noout -text 2>/dev/null | grep -A 1 "Subject Alternative Name" | grep -q localhost; then
                  SAN_VALID=false
                fi
              done
              echo "SAN_VALIDATION=$SAN_VALID"
            else
              echo "SAN_VALIDATION=skip"
            fi

            # Overall validation
            if [ "$CA_COUNT" -gt 0 ] && [ "$SERVER_COUNT" -gt 0 ] && [ "$KEY_COUNT" -gt 0 ]; then
              echo "CERT_VALIDATION_STATUS=pass"
            else
              echo "CERT_VALIDATION_STATUS=fail"
            fi
          args:
            executable: /bin/bash
          register: cert_file_validation
          failed_when: false
          changed_when: false
          when: cert_dir_stat.stat.exists

        - name: "‚úÖ Component 3 validation passed"
          debug:
            msg: |
              ‚úÖ COMPONENT 3 VALIDATION PASSED

              Certificate File Management: SUCCESS
              Location: {{ ansible_env.HOME }}/.local/share/certs

              {{ cert_file_validation.stdout }}

              Status: Certificates ready for platform services
          when:
            - cert_dir_stat.stat.exists
            - "'CERT_VALIDATION_STATUS=pass' in cert_file_validation.stdout"

        - name: "‚ö†Ô∏è Component 3 validation issues"
          debug:
            msg: |
              ‚ö†Ô∏è COMPONENT 3 VALIDATION ISSUES

              Certificate File Management: Problems detected

              {{ cert_file_validation.stdout if cert_file_validation is defined else 'Certificate directory exists but validation failed' }}

              Issues may include:
              ‚Ä¢ Missing CA certificate, server certificate, or private keys
              ‚Ä¢ Invalid SAN entries in certificates
              ‚Ä¢ Incomplete certificate file management
          when:
            - cert_dir_stat.stat.exists
            - "'CERT_VALIDATION_STATUS=fail' in cert_file_validation.stdout"

        - name: "Record Component 3 validation result"
          set_fact:
            component_3_valid: "{{ cert_dir_stat.stat.exists and 'CERT_VALIDATION_STATUS=pass' in cert_file_validation.stdout }}"
            component_3_status: "{{ 'Certificates ready for platform services' if (cert_dir_stat.stat.exists and cert_file_validation is defined and 'CERT_VALIDATION_STATUS=pass' in cert_file_validation.stdout) else 'Certificate file management incomplete or failed' }}"

      rescue:
        - name: "Record Component 3 validation failure"
          set_fact:
            component_3_valid: false
            component_3_error: "{{ ansible_failed_result.msg }}"

    - name: "üìä Overall Deployment Validation Results"
      debug:
        msg: |
          DEPLOYMENT VALIDATION SUMMARY
          ============================

          Component 1 (mkcert Binary): {{ '‚úÖ VALID' if component_1_valid | default(false) else '‚ùå INVALID' }}
          {% if component_1_valid | default(false) %}
          - Version: {{ component_1_version }}
          {% else %}
          - Error: {{ component_1_error | default('Unknown error') }}
          {% endif %}

          Component 2 (Windows CA Trust): {{ '‚úÖ VALID' if component_2_valid | default(false) else '‚ùå INVALID' }}
          {% if component_2_valid | default(false) %}
          - Status: {{ component_2_status }}
          {% else %}
          - Error: {{ component_2_error | default('Unknown error') }}
          {% endif %}

          Component 3 (Certificate File Management): {{ '‚úÖ VALID' if component_3_valid | default(false) else '‚ùå INVALID' }}
          {% if component_3_valid | default(false) %}
          - Status: {{ component_3_status }}
          {% else %}
          - Error: {{ component_3_error | default('Unknown error') }}
          {% endif %}

          Overall Status: {{ 'ALL COMPONENTS VALID' if (component_1_valid | default(false)) and (component_2_valid | default(false)) and (component_3_valid | default(false)) else 'VALIDATION FAILURES DETECTED' }}

          What this means:
          {% if (component_1_valid | default(false)) and (component_2_valid | default(false)) and (component_3_valid | default(false)) %}
          - Your deployment worked correctly
          - mkcert binary is ready for certificate operations
          - Windows CA trust is {{ component_2_status | lower }}
          - Certificate files are {{ component_3_status | lower }}
          - You can proceed to deploy platform services (Traefik, Registry)
          {% else %}
          - Your deployment has issues that need attention
          - Re-run the deployment: ansible-playbook ansible/orchestrators/setup-simple.yml
          - Follow any manual installation guidance provided
          - Then run this validation again
          {% endif %}

    - name: "‚ùå Fail if validation found issues"
      fail:
        msg: |
          DEPLOYMENT VALIDATION FAILED

          One or more components failed validation.
          See the detailed results above for specific issues.

          Fix the issues and re-run this validation.
      when: not ((component_1_valid | default(false)) and (component_2_valid | default(false)) and (component_3_valid | default(false)))
