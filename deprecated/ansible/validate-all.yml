---
# End-to-end validation of the complete platform setup
- name: "‚úÖ Platform Validation Suite"
  hosts: localhost
  gather_facts: yes
  vars_files:
    - group_vars/all.yml

  tasks:
    - name: "üîç Platform Validation Overview"
      debug:
        msg: |
          ‚úÖ Starting Complete Platform Validation

          Testing Components:
          - Certificate validation and trust
          - Network connectivity and DNS resolution
          - Traefik reverse proxy functionality
          - Container registry operations
          - HTTPS/TLS termination
          - Docker integration and image operations

    # ================================
    # Certificate Validation
    # ================================
    - name: "üîê mkcert Installation and CA Trust Validation"
      block:
        - name: Check mkcert installation
          command: which mkcert
          register: mkcert_check
          failed_when: false
          changed_when: false

        - name: Get mkcert CAROOT
          command: mkcert -CAROOT
          register: caroot_check
          failed_when: false
          changed_when: false
          when: mkcert_check.rc == 0

        - name: Check libnss3-tools installation (required for browser trust)
          command: dpkg -l libnss3-tools
          register: libnss3_check
          failed_when: false
          changed_when: false

        - name: Test certificate trust with curl
          command: curl -s --max-time 10 https://traefik.localhost/api/http/services
          register: curl_trust_test
          failed_when: false
          changed_when: false

        - name: Test certificate verification with openssl
          shell: |
            echo "Q" | openssl s_client -connect traefik.localhost:443 -servername traefik.localhost -verify_return_error -brief 2>/dev/null || echo "VERIFY_FAILED"
          register: openssl_verify_test
          failed_when: false
          changed_when: false

        - name: Certificate trust validation summary
          debug:
            msg: |
              üîê Certificate Trust Validation:

              Installation Status:
              - mkcert installed: {{ '‚úÖ' if mkcert_check.rc == 0 else '‚ùå' }}
              - libnss3-tools: {{ '‚úÖ' if libnss3_check.rc == 0 else '‚ùå MISSING - required for browser trust' }}
              {% if mkcert_check.rc == 0 %}
              - CAROOT location: {{ caroot_check.stdout }}
              {% endif %}

              Trust Tests:
              - curl without -k: {{ '‚úÖ Trusted' if curl_trust_test.rc == 0 else '‚ùå Certificate not trusted' }}
              - OpenSSL verification: {{ '‚úÖ Valid chain' if 'VERIFY_FAILED' not in openssl_verify_test.stdout else '‚ùå Verification failed' }}

              {% if curl_trust_test.rc != 0 or 'VERIFY_FAILED' in openssl_verify_test.stdout or libnss3_check.rc != 0 %}
              üö® ACTION REQUIRED:
              Certificate trust is not properly configured. This will cause:
              - Browser security warnings
              - curl/API calls to fail without -k flag
              - Examples repository connection issues

              {% if libnss3_check.rc != 0 %}
              Missing dependency: Install libnss3-tools for browser certificate support
              {% endif %}

              Run the platform setup to fix:
              ansible-playbook -i ansible/inventory/local-dev.ini ansible/setup-wsl2.yml --ask-become-pass
              {% endif %}

    - name: "üîê Certificate File Validation"
      block:
        - name: Check certificate files exist
          stat:
            path: "{{ cert_dir }}/{{ item }}"
          register: cert_files
          loop:
            - dev-localhost-wild.crt
            - dev-localhost-wild.key
            - dev-registry.localhost.crt
            - dev-registry.localhost.key

        - name: Validate certificate permissions
          stat:
            path: "{{ cert_dir }}/{{ item }}"
          register: cert_perms
          loop:
            - dev-localhost-wild.key
            - dev-registry.localhost.key

        - name: Check certificate expiration
          shell: |
            openssl x509 -in "{{ cert_dir }}/dev-localhost-wild.crt" -noout -dates
          register: cert_expiry
          changed_when: false
          failed_when: false

        - name: Validate certificate SAN entries
          shell: |
            openssl x509 -in "{{ cert_dir }}/dev-localhost-wild.crt" -text -noout | grep -A5 "Subject Alternative Name"
          register: cert_san
          changed_when: false
          failed_when: false

        - name: Certificate validation summary
          debug:
            msg: |
              üîê Certificate Validation:
              {% for result in cert_files.results %}
              - {{ result.item }}: {{ '‚úÖ' if result.stat.exists else '‚ùå' }}
              {% endfor %}

              Key Permissions:
              {% for result in cert_perms.results %}
              {% if result.stat.exists %}
              - {{ result.item }}: {{ '‚úÖ 0600' if result.stat.mode == '0600' else '‚ö†Ô∏è  ' + result.stat.mode }}
              {% else %}
              - {{ result.item }}: ‚ùå Missing
              {% endif %}
              {% endfor %}

              Certificate Details:
              {% if cert_expiry.rc == 0 %}
              {{ cert_expiry.stdout }}
              {% else %}
              ‚ùå Certificate not accessible for expiration check
              {% endif %}

              SAN Entries:
              {% if cert_san.rc == 0 %}
              {{ cert_san.stdout }}
              {% else %}
              ‚ùå Certificate not accessible for SAN validation
              {% endif %}

              {% if cert_files.results | selectattr('stat.exists') | list | length == 0 %}

              ‚ö†Ô∏è  No certificates found in {{ cert_dir }}
              This suggests Windows prerequisites haven't been completed yet.
              Run: .\scripts\win-prereqs.ps1 from Windows PowerShell as Administrator
              {% endif %}

    # ================================
    # Network Connectivity
    # ================================
    - name: "üåê Network Connectivity Tests"
      block:
        - name: Test local DNS resolution
          shell: nslookup {{ item }}
          register: dns_resolution
          failed_when: false
          loop:
            - registry.localhost
            - traefik.localhost

        - name: Test ping connectivity
          shell: ping -c 1 {{ item }}
          register: ping_test
          failed_when: false
          loop:
            - registry.localhost
            - traefik.localhost

        - name: Network connectivity summary
          debug:
            msg: |
              üåê Network Connectivity:
              DNS Resolution:
              {% for result in dns_resolution.results %}
              - {{ result.item }}: {{ '‚úÖ' if result.rc == 0 else '‚ùå' }}
              {% endfor %}

              Ping Tests:
              {% for result in ping_test.results %}
              - {{ result.item }}: {{ '‚úÖ' if result.rc == 0 else '‚ùå' }}
              {% endfor %}

    # ================================
    # Platform Configuration Validation
    # ================================
    - name: "‚öôÔ∏è  Platform Service Configuration Validation"
      block:
        - name: Check Ansible-generated platform services exist
          stat:
            path: "{{ ansible_env.HOME }}/platform-services/traefik/docker-compose.yml"
          register: ansible_compose

        - name: Check if wrong static compose is running
          shell: docker ps --filter "name=traefik" --format "{{ '{{.Command}}' }}" | grep -q "prerequisites/traefik-registry"
          register: wrong_compose_check
          failed_when: false
          changed_when: false

        - name: Validate correct certificate mounting
          shell: docker inspect traefik 2>/dev/null | jq -r '.[0].Mounts[] | select(.Destination=="/certs") | .Source' || echo "no-mount"
          register: cert_mount_check
          changed_when: false
          failed_when: false

        - name: Platform configuration summary
          debug:
            msg: |
              ‚öôÔ∏è  Platform Configuration Status:

              ‚úÖ Required Components:
              - Ansible platform services: {{ '‚úÖ' if ansible_compose.stat.exists else '‚ùå Missing' }}
              - Certificate mount path: {{ cert_mount_check.stdout if cert_mount_check.stdout != 'no-mount' else '‚ùå No certificates mounted' }}

              üö® Critical Issues:
              {% if wrong_compose_check.rc == 0 %}
              ‚ö†Ô∏è  WARNING: Static prerequisite docker-compose detected!

              üîß REQUIRED FIX:
              1. Stop: cd {{ ansible_env.HOME }}/repos/airflow-data-platform && docker compose -f prerequisites/traefik-registry/docker-compose.yml down
              2. Start: cd {{ ansible_env.HOME }}/platform-services/traefik && docker compose up -d

              The static files in prerequisites/ are templates only.
              Always use the Ansible-generated services in ~/platform-services/
              {% else %}
              ‚úÖ Using correct Ansible-generated platform services
              {% endif %}

    # ================================
    # Service Health Checks
    # ================================
    - name: "üöÄ Service Health Validation"
      block:
        - name: Check Docker containers
          shell: docker ps --format "table {{ '{{.Names}}' }}\t{{ '{{.Status}}' }}"
          register: container_status
          changed_when: false

        - name: Test HTTP endpoints (insecure)
          uri:
            url: "http://{{ item }}"
            method: GET
            timeout: 10
            validate_certs: no
          register: http_tests
          failed_when: false
          loop:
            - traefik.localhost
            - registry.localhost

        - name: Test HTTPS endpoints with certificate validation
          uri:
            url: "https://{{ item.url }}"
            method: GET
            timeout: 10
            validate_certs: yes
          register: https_tests_trusted
          failed_when: false
          loop:
            - { url: "traefik.localhost", desc: "Traefik Dashboard" }
            - { url: "registry.localhost/v2/_catalog", desc: "Registry API" }

        - name: Test HTTPS endpoints (insecure fallback)
          uri:
            url: "https://{{ item.url }}"
            method: GET
            timeout: 10
            validate_certs: no
            return_content: yes
          register: https_tests
          failed_when: false
          loop:
            - { url: "traefik.localhost/api/http/services", name: "Traefik API" }
            - { url: "registry.localhost/v2/_catalog", name: "Registry Catalog" }

        - name: Service health summary
          debug:
            msg: |
              üöÄ Service Health Status:

              Docker Containers:
              {{ container_status.stdout }}

              HTTPS Certificate Trust:
              {% for result in https_tests_trusted.results %}
              - {{ result.item.desc }}: {{ '‚úÖ Trusted' if result.status == 200 else '‚ö†Ô∏è Self-signed only' }}
              {% endfor %}

              HTTPS Endpoints (Insecure):
              {% for result in https_tests.results %}
              - {{ result.item.name }}: {{ '‚úÖ' if result.status == 200 else '‚ùå Status: ' + (result.status|string) }}
              {% endfor %}

    # ================================
    # Docker Registry Operations
    # ================================
    - name: "üì¶ Docker Registry Functionality"
      block:
        - name: Pull test image (external registry connectivity test)
          command: docker pull busybox:latest
          register: pull_busybox
          failed_when: false
          timeout: 30

        - name: Check if busybox is available locally
          command: docker images -q busybox:latest
          register: busybox_local_check
          failed_when: false

        - name: Use alpine as fallback if busybox unavailable
          command: docker pull alpine:latest
          register: pull_fallback
          failed_when: false
          timeout: 30
          when: pull_busybox.rc != 0 and busybox_local_check.stdout == ""

        - name: Tag available image for local registry
          shell: |
            if [ -n "$(docker images -q busybox:latest 2>/dev/null)" ]; then
              docker tag busybox:latest registry.localhost/test/busybox:validation
              echo "Tagged busybox:latest"
            elif [ -n "$(docker images -q alpine:latest 2>/dev/null)" ]; then
              docker tag alpine:latest registry.localhost/test/busybox:validation
              echo "Tagged alpine:latest"
            else
              echo "No suitable test image available for registry test"
              exit 1
            fi
          register: tag_image
          failed_when: tag_image.rc != 0

        - name: Push to local registry
          command: docker push registry.localhost/test/busybox:validation
          register: push_test

        - name: Remove local test image
          command: docker rmi registry.localhost/test/busybox:validation busybox:latest
          register: remove_images
          failed_when: false

        - name: Pull from local registry
          command: docker pull registry.localhost/test/busybox:validation
          register: pull_test

        - name: Clean up test image
          command: docker rmi registry.localhost/test/busybox:validation
          failed_when: false

        - name: Registry functionality summary
          debug:
            msg: |
              üì¶ Docker Registry Operations:
              - External connectivity: {{ '‚úÖ Docker Hub accessible' if pull_busybox.rc == 0 else ('‚ö†Ô∏è Limited (fallback used)' if pull_fallback is defined and pull_fallback.rc == 0 else '‚ùå No external access') }}
              - Image preparation: {{ '‚úÖ' if tag_image.rc == 0 else '‚ùå' }}
              - Push to local registry: {{ '‚úÖ' if push_test.rc == 0 else '‚ùå' }}
              - Pull from local registry: {{ '‚úÖ' if pull_test.rc == 0 else '‚ùå' }}

              üéØ Registry Status: {{ '‚úÖ Fully Functional' if (push_test.rc == 0 and pull_test.rc == 0) else '‚ùå Registry Issues' }}
              {% if pull_busybox.rc != 0 %}

              ‚ÑπÔ∏è Note: External registry access limited (likely network/proxy config).
              This doesn't affect platform functionality - local registry is working.{% endif %}

    # ================================
    # TLS/SSL Validation
    # ================================
    - name: "üîí TLS/SSL Certificate Validation"
      block:
        - name: Test TLS connection to Traefik
          shell: |
            echo | openssl s_client -connect traefik.localhost:443 -servername traefik.localhost 2>&1 |
            grep -E "(Certificate chain|Verification|SSL-Session)"
          register: tls_traefik
          failed_when: false

        - name: Test TLS connection to Registry
          shell: |
            echo | openssl s_client -connect registry.localhost:443 -servername registry.localhost 2>&1 |
            grep -E "(Certificate chain|Verification|SSL-Session)"
          register: tls_registry
          failed_when: false

        - name: TLS validation summary
          debug:
            msg: |
              üîí TLS/SSL Validation:
              - Traefik TLS: {{ '‚úÖ' if 'SSL-Session' in tls_traefik.stdout else '‚ùå' }}
              - Registry TLS: {{ '‚úÖ' if 'SSL-Session' in tls_registry.stdout else '‚ùå' }}

              Traefik Certificate Details:
              {{ tls_traefik.stdout }}

              Registry Certificate Details:
              {{ tls_registry.stdout }}

    # ================================
    # Platform Readiness Assessment
    # ================================
    - name: "üìä Final Platform Readiness Assessment"
      debug:
        msg: |
          üéØ Platform Readiness Assessment

          ‚úÖ VALIDATION COMPLETE

          Critical Components:
          - Certificates: {{ '‚úÖ' if (cert_files.results | selectattr('stat.exists') | list | length) == 4 else '‚ùå' }}
          - Network Resolution: {{ '‚úÖ' if (ping_test.results | selectattr('rc', 'equalto', 0) | list | length) == 2 else '‚ùå' }}
          - HTTPS Services: {{ '‚úÖ' if (https_tests.results | selectattr('status', 'equalto', 200) | list | length) == 2 else '‚ùå' }}
          - Registry Operations: {{ '‚úÖ' if (push_test.rc == 0 and pull_test.rc == 0) else '‚ùå' }}

          Platform Status:
          {% set cert_ok = (cert_files.results | selectattr('stat.exists') | list | length) == 4 %}
          {% set network_ok = (ping_test.results | selectattr('rc', 'equalto', 0) | list | length) == 2 %}
          {% set https_ok = (https_tests.results | selectattr('status', 'equalto', 200) | list | length) == 2 %}
          {% set registry_ok = (push_test.rc == 0 and pull_test.rc == 0) %}
          {% if cert_ok and network_ok and https_ok and registry_ok %}
          üéâ READY FOR DEVELOPMENT

          Your platform is fully configured and operational!

          Access Points:
          - Traefik Dashboard: https://traefik.localhost
          - Container Registry: https://registry.localhost
          - Registry Catalog: https://registry.localhost/v2/_catalog

          Next Steps:
          1. Deploy your first Airflow project
          2. Build and push custom images to registry.localhost
          3. Access via https://<your-app>.localhost
          {% else %}
          ‚ö†Ô∏è  SETUP INCOMPLETE

          Issues detected - please check the validation results above
          and resolve any failing components before proceeding.
          {% endif %}

    # ================================
    # Troubleshooting Information
    # ================================
    - name: "üîß Troubleshooting Information"
      debug:
        msg: |
          üîß Troubleshooting Guide

          Common Issues:

          ‚ùå Certificate Issues:
          - Ensure mkcert is installed and CA is trusted on Windows
          - Check certificates exist in {{ cert_dir }}
          - Verify certificate permissions (keys should be 0600)

          ‚ùå Network/DNS Issues:
          - Verify Windows hosts file contains entries for *.localhost domains
          - Check WSL2 can resolve hostnames: nslookup registry.localhost
          - Ensure Docker Desktop WSL2 integration is enabled

          ‚ùå Docker Issues:
          - Verify Docker daemon is running: docker info
          - Check containers are up: docker ps
          - Restart services: cd ~/platform-services/traefik && docker compose restart

          ‚ùå HTTPS/TLS Issues:
          - Check certificate trust chain
          - Verify Traefik dynamic configuration is loaded
          - Check container logs: docker compose logs traefik

          üÜò Get Help:
          1. Check container logs: docker compose logs -f
          2. Verify certificate validity: openssl x509 -in {{ cert_dir }}/dev-localhost-wild.crt -text -noout
          3. Test manual connections: curl -k https://registry.localhost/v2/_catalog
          4. Review Traefik dashboard for routing issues

      when: false  # Only show on explicit request or failure

    # ================================
    # Success Summary
    # ================================
    - name: Test certificate trust without -k flag (real validation)
      uri:
        url: "https://{{ item }}"
        method: GET
        timeout: 10
        validate_certs: true
      register: real_cert_tests
      failed_when: false
      with_items:
        - traefik.localhost
        - registry.localhost

    - name: Set validation status facts
      set_fact:
        certificates_exist: "{{ (cert_files.results | selectattr('stat.exists') | list | length) == 4 }}"
        network_working: "{{ (ping_test.results | selectattr('rc', 'equalto', 0) | list | length) == 2 }}"
        https_accessible: "{{ (https_tests.results | selectattr('status', 'equalto', 200) | list | length) == 2 }}"
        registry_working: "{{ push_test.rc == 0 and pull_test.rc == 0 }}"
        certificates_trusted: "{{ (real_cert_tests.results | selectattr('status', 'equalto', 200) | list | length) >= 1 }}"
        all_checks_passed: "{{
          certificates_exist and
          network_working and
          https_accessible and
          registry_working and
          certificates_trusted
        }}"

    - name: "üéâ Platform Validation Complete - SUCCESS"
      debug:
        msg: |
          üéâ SUCCESS! Astronomer Airflow Platform is ready!

          üìä Validation Results:
          ‚úÖ All critical checks passed
          ‚úÖ Platform services are running
          ‚úÖ Network connectivity verified
          ‚úÖ Certificate validation successful

          üåê Access Your Platform:
          ‚Ä¢ Traefik Dashboard: https://traefik.localhost
          ‚Ä¢ Container Registry: https://registry.localhost
          ‚Ä¢ Registry API: https://registry.localhost/v2/_catalog

          üöÄ Next Steps:
          1. Create your first Astronomer project
          2. Build and push Docker images to your local registry
          3. Deploy Airflow DAGs using the platform

          üí° Need Help?
          - Review container logs: docker compose logs -f
          - Check Traefik routing: https://traefik.localhost
          - Validate certificates: openssl x509 -in ~/.local/share/certs/dev-localhost-wild.crt -text -noout

          üéä Your development platform is ready to use!
      when: all_checks_passed

    - name: "‚ùå Platform Validation Failed"
      fail:
        msg: |
          ‚ùå PLATFORM SETUP FAILED!

          üìä Validation Results:
          - Certificates Exist: {{ '‚úÖ' if certificates_exist else '‚ùå' }}
          - Certificates Trusted: {{ '‚úÖ' if certificates_trusted else '‚ùå' }}
          - Network Resolution: {{ '‚úÖ' if network_working else '‚ùå' }}
          - HTTPS Services: {{ '‚úÖ' if https_accessible else '‚ùå' }}
          - Registry Operations: {{ '‚úÖ' if registry_working else '‚ùå' }}

          üö® CRITICAL ISSUES DETECTED

          The platform setup has validation failures. Please:
          1. Review the diagnostic output above
          2. Resolve any Docker proxy bypass issues
          3. Ensure certificate trust is properly configured
          4. Restart Docker Desktop if needed
          5. Re-run the installer after resolving issues

          Platform is NOT ready for use until all validation checks pass.
      when: not all_checks_passed
