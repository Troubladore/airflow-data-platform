---
# Clean teardown of platform services and configurations
- name: "üßπ Platform Teardown"
  hosts: localhost
  gather_facts: yes
  vars_files:
    - group_vars/all.yml

  tasks:
    - name: "üîç Detect Windows username"
      block:
        - name: Get Windows username from WINDOWS_USERNAME env
          set_fact:
            windows_username: "{{ lookup('env', 'WINDOWS_USERNAME') }}"
          when: lookup('env', 'WINDOWS_USERNAME') != ''

        - name: Get Windows username from WSL interop
          shell: |
            wslpath "$(cmd.exe /c 'echo %USERNAME%' 2>/dev/null | tr -d '\r')" 2>/dev/null | xargs -I {} basename {} || echo ""
          register: windows_user_cmd
          changed_when: false
          when: windows_username is not defined

        - name: Set Windows username from detection
          set_fact:
            windows_username: "{{ windows_user_cmd.stdout | trim }}"
          when:
            - windows_username is not defined
            - windows_user_cmd.stdout | trim != ""

        - name: Prompt for Windows username if not detected
          pause:
            prompt: |

              üë§ Windows Username Required

              Unable to auto-detect Windows username.
              Please enter your Windows username (e.g., john.doe)
          register: username_prompt
          when: windows_username is not defined

        - name: Set Windows username from prompt
          set_fact:
            windows_username: "{{ username_prompt.user_input }}"
          when: username_prompt.user_input is defined

    - name: "üßπ Platform Teardown Overview"
      debug:
        msg: |
          üßπ Starting Clean Platform Teardown

          This will remove:
          - Running Docker containers (Traefik, Registry)
          - Docker volumes and networks
          - Generated configuration files
          - WSL2 certificates (optional)

          Preserved items:
          - Windows certificates and CA (manual removal required)
          - Windows hosts file entries (manual removal required)
          - Docker Desktop installation
          - Base system packages

    - name: "üõë Stop and remove Docker services"
      block:
        - name: Check if Docker is available
          command: docker info
          register: docker_check
          failed_when: false
          changed_when: false

        - name: Skip Docker cleanup if Docker not available
          debug:
            msg: |
              ‚ö†Ô∏è  Docker not available - skipping Docker cleanup

              If Docker is installed but not running:
              1. Start Docker Desktop
              2. Re-run this teardown script
          when: docker_check.rc != 0

        - name: Docker cleanup tasks
          block:
            - name: Check if platform services exist
              stat:
                path: "{{ traefik_config_dir }}/docker-compose.yml"
              register: compose_file_check

            - name: Stop platform services
              command: docker compose down --volumes --remove-orphans
              args:
                chdir: "{{ traefik_config_dir }}"
              when: compose_file_check.stat.exists
              register: services_stop

            - name: Remove any remaining containers
              shell: |
                docker ps -aq --filter "name=traefik-bundle" | xargs -r docker rm -f
              failed_when: false

            - name: Remove Docker networks
              shell: |
                docker network ls --filter "name=traefik-bundle" -q | xargs -r docker network rm
              failed_when: false

            - name: Remove unused Docker volumes
              command: docker volume prune -f
              failed_when: false

            - name: Clean up Docker images (registry test images)
              shell: |
                docker images --filter "reference=registry.localhost/*" -q | xargs -r docker rmi -f
              failed_when: false
          when: docker_check.rc == 0

    - name: "üìÅ Remove configuration files"
      block:
        - name: Remove platform services directory
          file:
            path: "{{ platform_base_dir }}"
            state: absent

        - name: List removed directories
          debug:
            msg: |
              üìÅ Removed Configuration Directories:
              - {{ platform_base_dir }}/traefik/
              - {{ platform_base_dir }}/traefik/dynamic/

    - name: "üîê Certificate cleanup options"
      block:
        - name: Check WSL2 certificates
          stat:
            path: "{{ cert_dir }}"
          register: wsl2_cert_check

        - name: Show certificate status
          debug:
            msg: |
              üîê Certificate Status:
              WSL2 certificates: {{ '‚úÖ Found at ' + cert_dir if wsl2_cert_check.stat.exists else '‚ùå Not found (already removed or never created)' }}

        - name: Certificate cleanup choice
          pause:
            prompt: |
              üîê Certificate Cleanup Options:

              WSL2 certificates found in: {{ cert_dir }}

              Choose cleanup level:
              1) Keep certificates (recommended for quick rebuild)
              2) Remove WSL2 certificates only
              3) Remove everything (will attempt automatic removal, prompt for manual steps if needed)

              Enter choice (1-3)
          register: cleanup_choice
          when: wsl2_cert_check.stat.exists

        - name: Remove WSL2 certificates (option 2 or 3)
          file:
            path: "{{ cert_dir }}"
            state: absent
          when:
            - wsl2_cert_check.stat.exists
            - cleanup_choice.user_input | default('1') in ['2', '3']
          register: wsl_cert_removal

        - name: Attempt complete cleanup (option 3)
          block:
            - name: Try to uninstall mkcert CA from WSL2
              command: mkcert -uninstall
              failed_when: false
              register: mkcert_uninstall

            - name: Try to remove Windows certificates via WSL2
              file:
                path: "/mnt/c/Users/{{ windows_username | default(ansible_env.USER) }}/AppData/Local/mkcert"
                state: absent
              failed_when: false
              register: windows_cert_removal

            - name: Try to remove host entries
              lineinfile:
                path: /etc/hosts
                regexp: "{{ item }}"
                state: absent
              become: yes
              loop:
                - ".*traefik\\.localhost.*"
                - ".*registry\\.localhost.*"
                - ".*airflow\\.localhost.*"
              failed_when: false
              register: hosts_removal

            - name: Show what needs manual cleanup
              debug:
                msg: |
                  üîê Cleanup Results:

                  ‚úÖ Automatic cleanup completed:
                  - WSL2 certificates: {{ '‚úÖ Removed' if wsl_cert_removal is succeeded else '‚ùå Failed' }}
                  - mkcert CA uninstall: {{ '‚úÖ Done' if mkcert_uninstall.rc == 0 else '‚ö†Ô∏è Manual action needed' }}
                  - Windows certificates: {{ '‚úÖ Removed' if windows_cert_removal is succeeded else '‚ö†Ô∏è Manual action needed' }}
                  - Host entries: {{ '‚úÖ Removed' if hosts_removal is succeeded else '‚ö†Ô∏è Manual action needed' }}

                  {% if mkcert_uninstall.rc != 0 or windows_cert_removal is failed or hosts_removal is failed %}
                  ‚ö†Ô∏è Manual steps required for complete cleanup:
                  {% if windows_cert_removal is failed %}

                  Windows Certificates (PowerShell as admin):
                  Remove-Item "$env:LOCALAPPDATA\mkcert" -Recurse -Force
                  {% endif %}
                  {% if mkcert_uninstall.rc != 0 %}

                  Certificate Authority (PowerShell as admin):
                  mkcert -uninstall
                  {% endif %}
                  {% if hosts_removal is failed %}

                  Windows Hosts File (run as admin):
                  1. Edit C:\Windows\System32\drivers\etc\hosts
                  2. Remove lines containing localhost entries
                  {% endif %}
                  {% else %}

                  üéâ All components successfully removed automatically!
                  {% endif %}
          when:
            - cleanup_choice is defined
            - cleanup_choice.user_input | default('1') == '3'

    - name: "üß™ Verify teardown completion"
      block:
        - name: Check Docker availability for verification
          command: docker info
          register: docker_verify_check
          failed_when: false
          changed_when: false

        - name: Check for remaining containers
          shell: docker ps --filter "name=traefik-bundle" --format "table {{ '{{.Names}}' }}\t{{ '{{.Status}}' }}"
          register: remaining_containers
          changed_when: false
          when: docker_verify_check.rc == 0

        - name: Check for remaining volumes
          shell: docker volume ls --filter "name=traefik-bundle" -q
          register: remaining_volumes
          changed_when: false
          when: docker_verify_check.rc == 0

        - name: Check configuration directories
          stat:
            path: "{{ platform_base_dir }}"
          register: config_dir_check

        - name: Teardown verification
          debug:
            msg: |
              üßπ Teardown Verification:

              {% if docker_verify_check.rc == 0 %}
              Docker Containers: {{ '‚úÖ None remaining' if remaining_containers.stdout == '' else '‚ö†Ô∏è  Found: ' + remaining_containers.stdout }}
              Docker Volumes: {{ '‚úÖ Cleaned' if remaining_volumes.stdout == '' else '‚ö†Ô∏è  Remaining: ' + remaining_volumes.stdout }}
              {% else %}
              Docker Containers: ‚ö†Ô∏è  Docker not available - verification skipped
              Docker Volumes: ‚ö†Ô∏è  Docker not available - verification skipped
              {% endif %}
              Config Directory: {{ '‚úÖ Removed' if not config_dir_check.stat.exists else '‚ö†Ô∏è  Still exists' }}

    - name: "üìä Teardown Summary"
      debug:
        msg: |
          üßπ Platform Teardown Complete

          ‚úÖ Removed:
          - Docker containers and services
          - Docker volumes and networks
          - Configuration files and directories
          - Test images from local registry
          {% if cleanup_choice is defined and (cleanup_choice.user_input | default('1')) == '2' %}
          - WSL2 certificates
          {% endif %}

          ‚ö†Ô∏è  Manual Removal Required (if desired):
          - Windows certificates and CA
          - Windows hosts file entries
          - Docker Desktop (if uninstalling completely)

          üîÑ To Rebuild Platform:
          ansible-playbook -i inventory/local-dev.ini site.yml

          üí° Quick Rebuild (if certificates preserved):
          ansible-playbook -i inventory/local-dev.ini setup-wsl2.yml --skip-tags "certificates"
