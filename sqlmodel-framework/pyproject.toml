[project]
name = "sqlmodel-framework"
version = "1.0.0"
description = "SQLModel-based framework for data platform table mixins and deployment utilities"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Airflow Data Platform Team", email = "data-platform@example.com" }
]
maintainers = [
    { name = "Airflow Data Platform Team", email = "data-platform@example.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
requires-python = "==3.12.11"
dependencies = [
    "sqlmodel>=0.0.25",
    "sqlalchemy>=2.0.43",
    "psycopg2-binary>=2.9.10",
    "PyMySQL>=1.1.1",
    "pydantic>=2.10.5",
]
keywords = ["data", "platform", "framework", "sqlmodel", "testing", "temporal", "tables"]

[project.urls]
Homepage = "https://github.com/Troubladore/airflow-data-platform"
Repository = "https://github.com/Troubladore/airflow-data-platform.git"
Issues = "https://github.com/Troubladore/airflow-data-platform/issues"
Documentation = "https://github.com/Troubladore/airflow-data-platform/tree/main/docs"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "ruff",
    "mypy",
    "pre-commit",
    "bandit",
]
async = [
    "asyncpg==0.30.0",
    "aiomysql==0.2.0",
]
testing = [
    "faker==33.1.0",
    "factory-boy==3.3.0",
    "sqlalchemy-utils==0.41.2",
]
profiling = [
    "memory-profiler==0.61.0",
    "line-profiler==4.1.3",
]

# [project.scripts]
# deploy-datakit = "scripts.deploy_datakit:main"
# Note: Scripts commented out - internal framework, no package distribution

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]
exclude = ["tests*", ".pytest_cache", ".ruff_cache", ".venv"]

[tool.ruff]
line-length = 100
target-version = "py312"
extend-exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "D",   # pydocstyle
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D103",  # missing docstring in public function
    "D104",  # missing docstring in public package
    "D105",  # missing docstring in magic method
    "D107",  # missing docstring in __init__
    "D301",  # use r""" if any backslashes in docstring
    "D415",  # first line should end with period
    "F401",  # imported but unused (for __init__.py exports)
    "F841",  # local variable assigned but never used
    "B007",  # unused loop variable
    "B904",  # raise ... from err
    "ARG001", # unused function argument
    "C414",  # unnecessary list() call within sorted()
    "SIM105", # use contextlib.suppress
    "SIM108", # use ternary operator
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=sqlmodel_framework",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["sqlmodel_framework"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
