# Platform Bootstrap Configuration
# =================================
# Copy this to .env and customize for your organization

# ==========================================
# Kerberos Configuration
# ==========================================

# Company domain for Kerberos authentication
COMPANY_DOMAIN=COMPANY.COM

# Kerberos ticket cache location
# The sidecar mounts this directory to access your tickets
#
# Run 'klist' to see your ticket location, then set this to the directory:
#
# Examples:
#   Ticket cache: FILE:/tmp/krb5cc_1000
#   → Set: KERBEROS_TICKET_DIR=/tmp
#
#   Ticket cache: DIR::/home/user/.krb5-cache/dev/tkt
#   → Set: KERBEROS_TICKET_DIR=${HOME}/.krb5-cache
#
# The sidecar will automatically find and copy tickets from this directory.

# Configuration:
KERBEROS_TICKET_DIR=${HOME}/.krb5-cache

# Ticket mode (how sidecar gets tickets):
# - copy: Copies your existing kinit tickets from host (LOCAL DEVELOPMENT)
# - create: Creates tickets via password/keytab (PRODUCTION/K8S)
#
# For local development, use 'copy' - no password needed!
TICKET_MODE=copy

# ==========================================
# Note: Local Registry Removed
# ==========================================
# Docker caches all pulled images automatically in its native image store.
# No local registry service needed for single-developer environments.
# Custom images: docker build -t myimage:latest . (cached automatically)

# ==========================================
# Corporate Image Sources (For Layer 1 Build)
# ==========================================
# Configure image sources for building Layer 1 base image.
# These settings specify WHERE to pull base images from.
# Docker caches pulled images automatically.
#
# For corporate Artifactory:
# 1. Run: docker login artifactory.company.com
# 2. Set IMAGE_* variables below to your Artifactory paths
# 3. Build Layer 1: cd ../layer1-base-image && make build
#
# Credentials: Use docker login (NOT .env) - see docs/credential-management.md

# Example corporate paths (uncomment and customize):
# IMAGE_ASTRONOMER=artifactory.company.com/docker-remote/astronomer/ap-airflow:11.10.0
# IMAGE_PYTHON=artifactory.company.com/docker-remote/library/python:3.11-alpine
# IMAGE_ALPINE=artifactory.company.com/docker-remote/library/alpine:3.19
# IMAGE_MOCKSERVER=artifactory.company.com/docker-remote/mockserver/mockserver:latest

# ==========================================
# Microsoft ODBC Driver Source (For Kerberos Sidecar)
# ==========================================
# If your Artifactory mirrors Microsoft ODBC drivers, specify the base URL.
# The sidecar build (kerberos-sidecar/Makefile) uses this automatically.
#
# Default: Downloads from Microsoft (https://download.microsoft.com/...)
# Corporate: https://artifactory.company.com/microsoft-binaries/odbc/v18.3
#
# Drivers needed: msodbcsql18_18.3.2.1-1_amd64.apk, mssql-tools18_18.3.1.1-1_amd64.apk
# Contact DevOps if your organization mirrors these.
#
# ODBC_DRIVER_URL=

# ==========================================
# Notes
# ==========================================
#
# 1. Docker caches all pulled images automatically - no special setup needed
#
# 2. The local registry (port 5000) is for CUSTOM images you build:
#    - Custom Airflow images with your DAGs
#    - Custom Kerberos sidecars
#    - Any other containers you build locally
#
# 3. For corporate Artifactory users:
#    - Set IMAGE_* variables to your organization's image paths
#    - Contact DevOps for the correct repository paths
#    - Docker will cache these just like public images
#
# 4. Python packages (UV/pip):
#    - Configure separately via ~/.config/uv/uv.toml or pip.conf
#    - Not related to Docker image caching
#
