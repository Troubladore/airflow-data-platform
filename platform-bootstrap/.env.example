# Platform Bootstrap Configuration
# =================================
# Copy this to .env and customize for your organization

# ==========================================
# Kerberos Configuration
# ==========================================

# Company domain for Kerberos authentication
COMPANY_DOMAIN=COMPANY.COM

# Kerberos ticket cache location
# The sidecar mounts this directory to access your tickets
#
# Run 'klist' to see your ticket location, then set this to the directory:
#
# Examples:
#   Ticket cache: FILE:/tmp/krb5cc_1000
#   → Set: KERBEROS_TICKET_DIR=/tmp
#
#   Ticket cache: DIR::/home/user/.krb5-cache/dev/tkt
#   → Set: KERBEROS_TICKET_DIR=${HOME}/.krb5-cache
#
# The sidecar will automatically find and copy tickets from this directory.

# Configuration:
KERBEROS_TICKET_DIR=${HOME}/.krb5-cache

# Ticket mode (how sidecar gets tickets):
# - copy: Copies your existing kinit tickets from host (LOCAL DEVELOPMENT)
# - create: Creates tickets via password/keytab (PRODUCTION/K8S)
#
# For local development, use 'copy' - no password needed!
TICKET_MODE=copy

# ==========================================
# Python Package Index (For Test Image Build)
# ==========================================
# If your organization uses corporate PyPI mirror, set these:
#
# Example:
# PIP_INDEX_URL=https://artifactory.company.com/api/pypi/pypi-remote/simple
# PIP_TRUSTED_HOST=artifactory.company.com
#
# These are used when building platform/kerberos-test:latest
# (avoids public PyPI during test image build)

# ==========================================
# Note: Local Registry Removed
# ==========================================
# Docker caches all pulled images automatically in its native image store.
# No local registry service needed for single-developer environments.
# Custom images: docker build -t myimage:latest . (cached automatically)

# ==========================================
# Corporate Image Sources (For Layer 1 Build)
# ==========================================
# Configure image sources for building Layer 1 base image.
# These settings specify WHERE to pull base images from.
# Docker caches pulled images automatically.
#
# For corporate Artifactory:
# 1. Run: docker login artifactory.company.com
# 2. Set IMAGE_* variables below to your Artifactory paths
# 3. Build Layer 1: cd ../layer1-base-image && make build
#
# Credentials: Use docker login (NOT .env) - see docs/credential-management.md

# Example corporate paths (uncomment and customize):
# IMAGE_ASTRONOMER=artifactory.company.com/docker-remote/astronomer/ap-airflow:11.10.0
# IMAGE_PYTHON=artifactory.company.com/docker-remote/library/python:3.11-alpine
# IMAGE_ALPINE=artifactory.company.com/docker-remote/library/alpine:3.19
# IMAGE_MOCKSERVER=artifactory.company.com/docker-remote/mockserver/mockserver:latest

# ==========================================
# Microsoft ODBC Driver Source (For Kerberos Sidecar)
# ==========================================
# If your Artifactory mirrors Microsoft ODBC drivers, specify the base URL.
# The sidecar build (kerberos-sidecar/Makefile) uses this automatically.
#
# Default: Downloads from Microsoft (https://download.microsoft.com/...)
# Corporate: https://artifactory.company.com/microsoft-binaries/odbc/v18.3
#
# Drivers needed: msodbcsql18_18.3.2.1-1_amd64.apk, mssql-tools18_18.3.1.1-1_amd64.apk
# Contact DevOps if your organization mirrors these.
#
# ODBC_DRIVER_URL=

# ==========================================
# Microsoft SQL Tools Source (For SQL Server Testing)
# ==========================================
# If your organization blocks download.microsoft.com, set this to your
# corporate mirror for Microsoft ODBC driver and sqlcmd packages.
#
# Default: https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8
# Corporate example: https://artifactory.company.com/microsoft-binaries/sql-tools
#
# Files needed:
#   - msodbcsql18_18.4.1.1-1_amd64.apk (ODBC driver)
#   - mssql-tools18_18.4.1.1-1_amd64.apk (sqlcmd tool)
#
# Note: If set, requires .netrc file for authentication to Artifactory
#
# MSSQL_TOOLS_URL=

# ==========================================
# OpenMetadata Configuration
# ==========================================
# OpenMetadata provides metadata cataloging and data discovery
# Runs as always-on platform service (included in 'make platform-start')

# OpenMetadata UI port
OPENMETADATA_PORT=8585

# Cluster name (appears in UI)
OPENMETADATA_CLUSTER_NAME=local-dev

# ==========================================
# Database Passwords (CHANGE THESE!)
# ==========================================
# Shared platform PostgreSQL (OLTP workloads)
# Contains: openmetadata_db, airflow_db (future), etc.
#
# Note: Separate from warehouse PostgreSQL (OLAP workloads)

PLATFORM_DB_PASSWORD=changeme_platform_password
OPENMETADATA_DB_PASSWORD=changeme_openmetadata_password

# ==========================================
# OpenMetadata Images (For Corporate Artifactory)
# ==========================================
# Default: Public images from docker.getcollate.io and docker.elastic.co
# Corporate: Contact DevOps for Artifactory mirror paths
#
# Example corporate paths (uncomment and customize):
# IMAGE_OPENMETADATA_SERVER=artifactory.company.com/docker-remote/openmetadata/server:1.2.0
# IMAGE_ELASTICSEARCH=artifactory.company.com/docker-remote/elasticsearch/elasticsearch:8.10.2
# IMAGE_POSTGRES=artifactory.company.com/docker-remote/library/postgres:15

# ==========================================
# Notes
# ==========================================
#
# 1. OpenMetadata starts automatically with 'make platform-start'
#    - No separate installation step
#    - Access UI at http://localhost:8585
#    - Default login: admin@open-metadata.org / admin
#
# 2. Ingestion runs via Astronomer DAGs (everything as code!)
#    - See examples/openmetadata-ingestion/dags/
#    - No manual UI clicking required
#
# 3. Shared PostgreSQL pattern (OLTP):
#    - One PostgreSQL instance for all platform services
#    - Multiple databases (openmetadata_db, airflow_db, etc.)
#    - Matches production architecture
#    - Separate from warehouse PostgreSQL (OLAP)
#
# 4. For corporate Artifactory users:
#    - Run: docker login artifactory.company.com
#    - Set IMAGE_* variables to your organization's paths
#    - Contact DevOps for correct repository paths
#
