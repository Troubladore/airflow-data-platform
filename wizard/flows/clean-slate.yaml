name: clean-slate
version: "1.1"
description: "Clean-slate wizard with system discovery - orchestrates service teardown"

# Discovery phase - runs BEFORE service selection
steps:
  - id: run_discovery
    type: action
    action: discovery.scan_all_services
    next: show_discovery_results

  - id: show_discovery_results
    type: display
    prompt: |
      Discovering platform services...

      Discovery complete. Found {total_artifacts} total artifacts.
    next: check_empty_state

  - id: check_empty_state
    type: conditional
    condition: "state.total_artifacts == 0"
    next:
      when_true: show_clean_message
      when_false: null  # Continue to service_selection section

  - id: show_clean_message
    type: display
    prompt: |
      System is already clean! No platform artifacts detected.

      Checked:
        - Docker containers
        - Docker images
        - Docker volumes
        - Configuration files
    next: null

# Service selection - which services to tear down
service_selection:
  # PostgreSQL selection
  - id: check_postgres_artifacts
    type: conditional
    condition: "has_artifacts('base_platform')"
    next:
      when_true: select_postgres_teardown
      when_false: check_openmetadata_artifacts

  - id: select_postgres_teardown
    type: boolean
    prompt: "Tear down PostgreSQL?"
    state_key: services.base_platform.postgres.teardown.enabled
    default_value: false
    next: check_openmetadata_artifacts

  # OpenMetadata selection
  - id: check_openmetadata_artifacts
    type: conditional
    condition: "has_artifacts('openmetadata')"
    next:
      when_true: select_openmetadata_teardown
      when_false: check_kerberos_artifacts

  - id: select_openmetadata_teardown
    type: boolean
    prompt: "Tear down OpenMetadata?"
    state_key: services.openmetadata.teardown.enabled
    default_value: false
    next: check_kerberos_artifacts

  # Kerberos selection
  - id: check_kerberos_artifacts
    type: conditional
    condition: "has_artifacts('kerberos')"
    next:
      when_true: select_kerberos_teardown
      when_false: check_pagila_artifacts

  - id: select_kerberos_teardown
    type: boolean
    prompt: "Tear down Kerberos?"
    state_key: services.kerberos.teardown.enabled
    default_value: false
    next: check_pagila_artifacts

  # Pagila selection
  - id: check_pagila_artifacts
    type: conditional
    condition: "has_artifacts('pagila')"
    next:
      when_true: select_pagila_teardown
      when_false: null

  - id: select_pagila_teardown
    type: boolean
    prompt: "Tear down Pagila?"
    state_key: services.pagila.teardown.enabled
    default_value: false
    next: null

# Services to tear down (CRITICAL: reverse topological ordering)
# Dependents MUST tear down BEFORE their dependencies
targets:
  - service: pagila
    teardown: true
    enabled: false
    depends_on:
      - base_platform  # Pagila depends on base_platform, so tears down BEFORE it

  - service: openmetadata
    teardown: true
    enabled: false
    depends_on:
      - base_platform  # OpenMetadata depends on base_platform, so tears down BEFORE it

  - service: kerberos
    teardown: true
    enabled: false
    depends_on: []

  - service: base_platform
    teardown: true
    enabled: false
    depends_on: []  # base_platform torn down LAST (no dependencies in teardown)

# Final cleanup - runs AFTER all services are torn down
final_cleanup:
  - id: cleanup_orphaned_resources
    type: action
    action: discovery.cleanup_orphaned_resources
    next: null

# Execution policy
policy:
  ordering: reverse-topological  # Teardown order is REVERSE of setup
  on_failure: abort
